// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package topologyupdater

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeTopologyClient is the client API for NodeTopology service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeTopologyClient interface {
	UpdateNodeTopology(ctx context.Context, in *NodeTopologyRequest, opts ...grpc.CallOption) (*NodeTopologyResponse, error)
}

type nodeTopologyClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeTopologyClient(cc grpc.ClientConnInterface) NodeTopologyClient {
	return &nodeTopologyClient{cc}
}

func (c *nodeTopologyClient) UpdateNodeTopology(ctx context.Context, in *NodeTopologyRequest, opts ...grpc.CallOption) (*NodeTopologyResponse, error) {
	out := new(NodeTopologyResponse)
	err := c.cc.Invoke(ctx, "/topologyupdater.NodeTopology/UpdateNodeTopology", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeTopologyServer is the server API for NodeTopology service.
// All implementations must embed UnimplementedNodeTopologyServer
// for forward compatibility
type NodeTopologyServer interface {
	UpdateNodeTopology(context.Context, *NodeTopologyRequest) (*NodeTopologyResponse, error)
	mustEmbedUnimplementedNodeTopologyServer()
}

// UnimplementedNodeTopologyServer must be embedded to have forward compatible implementations.
type UnimplementedNodeTopologyServer struct {
}

func (UnimplementedNodeTopologyServer) UpdateNodeTopology(context.Context, *NodeTopologyRequest) (*NodeTopologyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeTopology not implemented")
}
func (UnimplementedNodeTopologyServer) mustEmbedUnimplementedNodeTopologyServer() {}

// UnsafeNodeTopologyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeTopologyServer will
// result in compilation errors.
type UnsafeNodeTopologyServer interface {
	mustEmbedUnimplementedNodeTopologyServer()
}

func RegisterNodeTopologyServer(s *grpc.Server, srv NodeTopologyServer) {
	s.RegisterService(&_NodeTopology_serviceDesc, srv)
}

func _NodeTopology_UpdateNodeTopology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeTopologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTopologyServer).UpdateNodeTopology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topologyupdater.NodeTopology/UpdateNodeTopology",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTopologyServer).UpdateNodeTopology(ctx, req.(*NodeTopologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeTopology_serviceDesc = grpc.ServiceDesc{
	ServiceName: "topologyupdater.NodeTopology",
	HandlerType: (*NodeTopologyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateNodeTopology",
			Handler:    _NodeTopology_UpdateNodeTopology_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/topologyupdater/topology-updater.proto",
}
